import os
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from dateutil.parser import parse
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.callback_data import CallbackData
import asyncio
import logging

import weather
from geo_api import get_coordinates_by_address, get_data_by_coordinates, get_map_by_coordinates
import db_real
from weather import get_weather_by_coordinates
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar
import datetime
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from asyncio import sleep
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text



class CreateGroupState(StatesGroup):
    owner_id = State()
    date = State()
    time = State()
    address = State()
    coordinates = State()
    access = State()
    password = State()
    db_push = State()


class StartState(StatesGroup):
    start_menu = State()


class CreateTripState(StatesGroup):
    invitor = State()
    password = State()
    group_id = State()
    departure = State()
    transport_type = State()
    delay = State()


class AddUserState(StatesGroup):
    get_group_id = State()
    get_username = State()
    add_user = State()


storage = MemoryStorage()
FORMAT = '%(asctime)s - [%(levelname)s] -  %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s'
logging.basicConfig(format=FORMAT)
logger = logging.getLogger(__name__)

TOKEN = '5855851155:AAHTBjBysCgf6fvrEnaZxnong1oTpIQVJiU'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)


def create_navigation_keyboard():
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    home_button = types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")
    return [back_button, home_button]


# You can use state '*' if you need to handle all states
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
    await start_command(message, state)


async def send_group_data(user_id, group_id):
    group_data = db_real.get_group_data(group_id)
    await bot.send_message(chat_id=user_id,
                           text=f'‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–∫–µ:\n\n'
                                f'üåç –ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {group_data[0]}\n'
                                f'üïê –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {group_data[1]}\n')


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message, state: FSMContext):
    try:
        db_real.create_user(message.from_user.id, message.from_user.username, message.from_user.first_name,
                            message.from_user.last_name)
    except Exception as ex:
        logger.warning(ex)
    finally:
        await bot.send_message(message.from_user.id,
                               f"–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?  \r\n \r\nüëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!  \r\n \r\nü§ñ–Ø ‚Äì –±–æ—Ç –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á ¬´Easymeet¬ª. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:  \r\n \r\nü§ù–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º  \r\n‚è±–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–±–æ—Ä—ã –∏ –¥–æ—Ä–æ–≥—É —Å —É—á–µ—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è \r\n‚è≥–ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–∏—Ç—å \r\nüåç–£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏  \r\n\n‚ùóÔ∏è–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n ")

    kb = InlineKeyboardMarkup()
    buttons = [InlineKeyboardButton(text='‚¨ÜÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É', callback_data='create_group'),
               InlineKeyboardButton(text='‚ÜóÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ', callback_data='join_group')]

    your_groups = db_real.select(
        f'select * from groups where owner_id = {message.from_user.id} and meet_time >= date()')
    # if len(your_groups):
    #     buttons.append(InlineKeyboardButton(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É', callback_data='invite_user'))
    kb.add(*buttons)
    await bot.send_message(chat_id=message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb)
    await StartState.start_menu.set()


@dp.callback_query_handler(state=StartState.start_menu)
async def start_processing(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'create_group':
        await CreateGroupState.date.set()
        await input_date(callback.message)
    if callback.data == 'invite_user':
        kb = InlineKeyboardMarkup(row_width=1)
        time_dest = db_real.select(
            f'select id, meet_time, destination from groups where owner_id = {callback.from_user.id} and meet_time >= date() order by id')
        buttons = [InlineKeyboardButton(text=str(td[0]) + ' | ' + str(td[1]) + ' | ' + str(td[2]),
                                        callback_data=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É {td[0]}')
                   for td in time_dest]
        kb.add(*buttons)
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=kb)
        await AddUserState.get_group_id.set()
    if callback.data == 'join_group':
        await CreateTripState.invitor.set()
        await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: ')


@dp.message_handler(state='*', commands='help')
async def help_command(message: types.Message):
    help_data = "/cancel - –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç)" \
                "\n\n" \
                "–û—Ç–∑—ã–≤—ã –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—é–¥–∞: @pushcip\n\n" \
                "/create_group [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] [–∞–¥—Ä–µ—Å] - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–µ–∑–¥–∫–∏. –ë–æ—Ç –≤–µ—Ä–Ω—ë—Ç id –≥—Ä—É–ø–ø—ã\n" \
                "/change_group_date [–¥–∞—Ç–∞] - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏\n" \
                "/change_group_time [–≤—Ä–µ–º—è] - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏\n" \
                "/change_group_address [–∞–¥—Ä–µ—Å] - –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –≤—Å—Ç—Ä–µ—á–∏\n" \
                "/add_user_to_group [id –≥—Ä—É–ø–ø—ã] [username] - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É\n" \
                "/delete_user_from_group [id –≥—Ä—É–ø–ø—ã] [username] - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã\n" \
                "/ask_to_join_group [id –≥—Ä—É–ø–ø—ã] - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ\n" \
                "/leave_group [id –≥—Ä—É–ø–ø—ã] - –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É\n" \
                "/get_my_group_list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã\n" \
                "/get_group_info [id –≥—Ä—É–ø–ø—ã] - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã\n" \
                "/change_departure [id –≥—Ä—É–ø–ø—ã] - –∑–∞–¥–∞—Ç—å –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ\n" \
                "/get_meet_data [id –≥—Ä—É–ø–ø—ã] - –ø–æ—Å–æ–º—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–µ–∑–¥–∫–µ\n" \
                "/change_departure [id –≥—Ä—É–ø–ø—ã] [–∞–¥—Ä–µ—Å] - –∏–∑–º–µ–Ω–∏–∏—Ç—å –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ\n" \
                "/notice_me [id –≥—Ä—É–ø–ø—ã] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç] - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–æ–µ–∑–¥–∫–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á—Ç–≤–æ –º–∏–Ω—É—Ç\n" \
                "/get_weather [–∞–¥—Ä–µ—Å] - —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É\n" \
                "/get_weather [id –≥—Ä—É–ø–ø—ã] - —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É –≤—Å—Ç—Ä–µ—á–∏\n"
    await bot.send_message(message.from_user.id, help_data)


@dp.message_handler(state=CreateTripState.invitor)
async def ask_to_add_user_to_group(message: Message, state: FSMContext):
    group_id = message.text
    if not db_real.check_group_by_id(message.text):
        await message.reply('–ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        if not db_real.check_user_in_group(group_id, message.from_user.username):
            owner_id = db_real.select(f'select owner_id from groups where id = {group_id}')[0][0]
            await state.update_data(invitor=owner_id)
            await state.update_data(group_id=group_id)
            password = db_real.check_access(group_id)
            await state.update_data(password=password)
            if password is not None:
                await bot.send_message(message.from_user.id, 'üöß –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏')
                await CreateTripState.password.set()
            else:
                await send_group_data(message.from_user.id, group_id)
                await create_trip(message.from_user.id)
        else:
            await bot.send_message(message.from_user.id,
                                   f'–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {group_id}')


@dp.message_handler(state=CreateTripState.password)
async def input_password(message: Message, state: FSMContext):
    data = await state.get_data()
    pw = data['password']
    if message.text == pw:
        await send_group_data(message.from_user.id, data['group_id'])
        await create_trip(message.from_user.id)
    else:
        await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@dp.message_handler(commands=["notice_me"])
async def notice_me(message: types.Message):
    try:
        group_id = message.text.split()[1]
        delay_time = int(message.text.split()[2])
        if not db_real.check_group_by_id(group_id):
            await message.reply('–ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            return
        if not db_real.check_user_in_group(group_id, message.from_user.username):
            await message.reply('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ')
            return

        if db_real.is_noticed(group_id, message.from_user.id):
            await message.reply('–Ø –ø–æ–º–Ω—é –ø—Ä–æ —Ç–µ–±—è')
            return

        await message.answer("–Ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂—É –≤–∞—Å –æ –≤—ã—Ö–æ–¥–µ")
        # db_real.set_noticed(group_id, message.from_user.id)

        meet_address, meet_time = db_real.get_group_data(group_id)
        user_id = db_real.get_user_id_by_chat_id(message.from_user.id)
        trip_time = int(db_real.get_trip_data(group_id, user_id))
        now = datetime.datetime.now()
        datetime_object = datetime.datetime.strptime(meet_time, '%Y-%m-%d %H:%M:%S')
        result = datetime_object - now

        await sleep(result.total_seconds() - delay_time * 60 - trip_time * 60)
        await bot.send_message(message.from_user.id, f"–í–∞–º –ø–æ—Ä–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É {group_id}. –ü–æ –∞–¥—Ä–µ—Å—É: {meet_address}.")
    except Exception as ex:
        logger.warning(ex)
        await bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")


@dp.message_handler(commands=["get_group_info"])
async def get_group_info(message: types.Message):
    group_id = message.text.split()[1]
    if not db_real.check_group_by_id(group_id):
        await message.reply('–ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        info = db_real.get_group_data(group_id)
        await message.answer(f"–ú–µ—Å—Ç–æ –≤—Ç—Ä–µ—á–∏: {info[0]}\n–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞: {info[1]}\n")


@dp.message_handler(commands=["get_my_group_list"])
async def get_my_group_list(message: types.Message):
    group_data = db_real.get_user_groups(message.from_user.id)
    text = ""
    for info in group_data:
        text += f"\t–ì—Ä—É–ø–ø–∞ {info[0]}:\n"
        text += f"–ú–µ—Å—Ç–æ –≤—Ç—Ä–µ—á–∏: {info[3]}\n–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞: {info[4]}\n"
        text += f"–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {info[1]}\n–≠—Ç–æ –∑–∞–π–º—ë—Ç: {info[2]}\n\n"
    await message.answer(text)


async def invite_user_to_join_group(group_id, my_username, invite_username):
    keyboard = types.InlineKeyboardMarkup()
    menu_1 = types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data="user accept invite to group")
    menu_2 = types.InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data="user decline invite to group")
    keyboard.add(menu_1, menu_2)
    chat_id = db_real.get_chat_id_by_username(invite_username)
    await bot.send_message(db_real.get_chat_id_by_username(my_username),
                           f'–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {group_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {invite_username}')
    await bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {my_username} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ –≥—Ä—É–ø–ø—É {group_id}",
                           reply_markup=keyboard)


@dp.message_handler(commands=["add_user_to_group"])
async def user_to_group(message: types.Message):
    message_data = message.text.split()
    try:
        group_id = message_data[1]
        username = message_data[2]
        if not db_real.user_exist(username):
            raise RuntimeError("User does not exist")
        if not db_real.check_user_in_group(group_id, username):
            await invite_user_to_join_group(group_id, message.from_user.username, username)
        else:
            await bot.send_message(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ")
    except Exception as ex:
        logger.warning(ex)
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥")


@dp.callback_query_handler(state=AddUserState.get_group_id)
async def input_user(callback: CallbackQuery, state: FSMContext):
    group_id = callback.data.split()[-1]
    await state.update_data(get_group_id=group_id)
    await bot.send_message(callback.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:')
    await AddUserState.get_username.set()


@dp.message_handler(commands=["get_group_list"])
async def get_group_list(message: types.Message):
    trip_data = message.text.split()
    print(trip_data)
    try:
        group_id = int(trip_data[1])
        group_list = db_real.select(f'select username from trips tr join users u on tr.user_id = u.chat_id where '
                                    f'group_id = {group_id}')
        print(group_list)
        if len(group_list):
            await message.reply(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: {', '.join(group_list)}")
        else:
            await message.reply("–ì—Ä—É–ø–ø–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞(")
    except Exception as ex:
        logger.warning(ex)
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥")


@dp.message_handler(commands=["get_weather"])
async def weather_by_address(message: types.Message):
    try:
        trip_address = ' '.join(message.text.split()[1:])
        if trip_address.isdigit():
            trip_address = db_real.get_group_data(trip_address)[0]

        address_coordinates = get_coordinates_by_address(trip_address)
        if not address_coordinates:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å")
        weather = get_weather_by_coordinates(address_coordinates)
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É : {trip_address}")
        await bot.send_message(message.from_user.id, weather)
    except Exception as ex:
        logger.warning(ex)
        await message.reply("–¢—ã —á—Ç–æ-—Ç–æ –≤–≤—ë–ª –Ω–µ —Ç–∞–∫(")


@dp.message_handler(commands=["change_departure"])
async def add_departure(message: types.Message, state: FSMContext):
    try:
        trip_data = message.text.split()
        group_id = int(trip_data[1])
        await state.update_data(group_id=group_id)
        await create_trip(message.from_user.id)
    except Exception as ex:
        logger.warning(ex)
        await message.reply("–¢—ã —á—Ç–æ-—Ç–æ –≤–≤—ë–ª –Ω–µ —Ç–∞–∫(")


# @dp.callback_query_handler(state=CreateTripState.group_id)
# async def join_trip(callback: types.CallbackQuery, state: FSMContext):
#     if callback.data == 'user accept join to group':
#         await bot.send_message(chat_id=callback.from_user.id, text='–í—ã –ø—Ä–∏–Ω—è–ª–∏ ')


@dp.callback_query_handler(
    lambda callback: callback.data == 'user accept invite to group' or callback.data == 'user decline invite to group')
async def trip_callback(callback: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    if callback.data == "user accept invite to group":
        group_id = int(callback.message.text.split()[-1])
        invitor = db_real.get_chat_id_by_username(callback.message.text.split()[1])
        await state.update_data(invitor=invitor)
        await CreateTripState.group_id.set()
        await state.update_data(group_id=group_id)
        await create_trip(callback.from_user.id)
    elif callback.data == "user decline invite to group":
        group_id = int(callback.message.text.split()[-1])
        print(group_id)
        invitor_username = db_real.get_chat_id_by_username(callback.message.text.split()[1])
        print(callback.message.text.split())
        print(invitor_username)
        await bot.send_message(invitor_username,
                               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ {group_id}")


@dp.message_handler(commands=["create_group"])
async def input_date(message: Message):
    await message.answer("üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ", reply_markup=await SimpleCalendar().start_calendar())
    await CreateGroupState.date.set()


@dp.callback_query_handler(simple_cal_callback.filter(), state=CreateGroupState.date)
async def process_input_date(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    await state.update_data(owner_id=callback_query.from_user.id)
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {date.strftime("%d-%m-%Y")}'
        )
        await state.update_data(date=date.date())
        await CreateGroupState.next()
        await callback_query.message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ")
        data = await state.get_data()


@dp.message_handler(state=CreateGroupState.time)
async def input_time(message: Message, state: FSMContext):
    try:
        time = datetime.datetime.strptime(message.text, '%H:%M')
        await state.update_data(time=message.text)
        await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è: {message.text}')
        await state.update_data(time=time.time())
        await CreateGroupState.next()
        await bot.send_message(chat_id=message.from_user.id, text='üè° –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–µ–∑–¥–∫–∏: ')
    except Exception as ex:
        logger.warning(ex)
        await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')
        await CreateGroupState.time.set()


@dp.message_handler(state=CreateGroupState.address)
async def input_address(message: Message, state: FSMContext):
    address_coordinates = get_coordinates_by_address(message.text)
    if not address_coordinates:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å')
        await CreateGroupState.address.set()
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å")
    else:
        await state.update_data(address=message.text)
        map = get_map_by_coordinates(address_coordinates[0], address_coordinates[1])
        if map:
            await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å')
            await message.answer_photo(photo=map)
    await state.update_data(latitude=address_coordinates[0])
    await state.update_data(longitude=address_coordinates[1])
    await CreateGroupState.access.set()

    kb = InlineKeyboardMarkup()
    private_key = InlineKeyboardButton(text='üöß –ó–∞–∫—Ä—ã—Ç—ã–π', callback_data='private')
    public_key = InlineKeyboardButton(text='üòÅ –û—Ç–∫—Ä—ã—Ç—ã–π', callback_data='public')
    kb.add(private_key, public_key)

    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–µ–∑–¥–∫–µ', reply_markup=kb)


@dp.callback_query_handler(state=CreateGroupState.access)
async def process_access(callback=CallbackQuery, state=FSMContext):
    if callback.data == 'public':
        await state.update_data(access='public')
        await CreateGroupState.password.set()
        await state.update_data(password=None)
        await input_password(callback.message, state)

    elif callback.data == 'private':
        await state.update_data(access='private')
        await bot.send_message(callback.from_user.id, '‚úèÔ∏è –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏')
        await CreateGroupState.password.set()


@dp.message_handler(state=CreateGroupState.password)
async def input_password(message: Message, state: FSMContext):
    data = await state.get_data()
    if data['access'] == 'private':
        await state.update_data(password=message.text)
        await message.reply('–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        data = await state.get_data()

    await CreateGroupState.db_push.set()
    datetime_obj = datetime.datetime.combine(data['date'], data['time'])
    group_id = db_real.create_group(datetime_obj, data['address'], data["owner_id"], data['latitude'],
                                    data['longitude'], data['password'])
    await state.update_data(db_push=group_id)
    await bot.send_message(chat_id=data["owner_id"], text=f'–ì–æ—Ç–æ–≤–æ! ID –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏: {group_id}')
    await state.finish()
    await CreateTripState.group_id.set()
    await state.update_data(group_id=group_id)
    await create_trip(data["owner_id"])


async def create_trip(user_id):
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    await CreateTripState.departure.set()


@dp.message_handler(state=CreateTripState.departure)
async def input_departure(message: Message, state: FSMContext):
    address_coordinates = get_coordinates_by_address(message.text)
    if not address_coordinates:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å')
        await CreateGroupState.address.set()
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å")
    else:
        await state.update_data(departure=message.text)
        map = get_map_by_coordinates(address_coordinates[0], address_coordinates[1])
        if map:
            await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å—Å')
            await message.answer_photo(photo=map)

    await state.update_data(departure=message.text)
    await state.update_data(departure_coord=address_coordinates)
    car_button = InlineKeyboardButton("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="car")
    public_transport_button = InlineKeyboardButton("üöå –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="public transport")

    keyboard = InlineKeyboardMarkup().row(car_button, public_transport_button)

    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Ç—Ä–∞—Å–ø–æ—Ä—Ç–∞', reply_markup=keyboard)
    await CreateTripState.transport_type.set()


@dp.callback_query_handler(state=CreateTripState.transport_type)
async def input_transport_type(callback_query: CallbackQuery, state: FSMContext):
    try:
        if callback_query.data == "car":
            await callback_query.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
            await state.update_data(transport_type='driving')

        elif callback_query.data == "public transport":
            await state.update_data(transport_type='taxi')
            await callback_query.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')

        else:
            await callback_query.answer('–Ø —Ç—É–ø–æ–π –¥–µ–±–∏–ª, –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –≤—ã –Ω–∞–∂–∞–ª–∏')

        data = await state.get_data()
        await bot.send_message(callback_query.from_user.id, '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏...')
        print('data is:', data)
        arrival = db_real.get_arrival_coordinates(data['group_id'])
        trip_data = get_data_by_coordinates(arrival, data['departure_coord'],
                                            data['transport_type'])  # data['transport_type']
        await bot.send_message(callback_query.from_user.id, f"‚è≥ –í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –∑–∞—Ç—Ä–∞—Ç–∏—Ç {trip_data[0] // 60} –º–∏–Ω—É—Ç.")
        db_real.create_trip(data['group_id'], callback_query.from_user.id, data['departure'], data['transport_type'],
                            trip_data[0] // 60)
        await bot.send_message(callback_query.from_user.id, f"üéâ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ {data['group_id']}!")
        await CreateTripState.delay.set()
        await bot.send_message(chat_id=callback_query.from_user.id, text='üì£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ '
                                                                         '–Ω–∞–ø–æ–º–Ω–∏—Ç—å –í–∞–º –æ –ø–æ–µ–∑–¥–∫–µ')
        try:
            await bot.send_message(data['invitor'],
                                   f"‚ùï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ {data['group_id']}")
        except Exception as ex:
            logger.warning(ex)

    except Exception as ex:
        logger.warning(ex)


@dp.message_handler(state=CreateTripState.delay)
async def input_transport_type(message: Message, state: FSMContext):
    try:
        delay_time = int(message.text)

        data = await state.get_data()
        group_id = data['group_id']

        await message.answer("üëå –Ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂—É –≤–∞—Å –æ –≤—ã—Ö–æ–¥–µ")

        coordinates = db_real.get_coordinates_by_group(group_id)

        # db_real.set_noticed(group_id, message.from_user.id)
        meet_address, meet_time = db_real.get_group_data(group_id)
        user_id = db_real.get_user_id_by_chat_id(message.from_user.id)
        trip_time = int(db_real.get_trip_data(group_id, user_id))
        now = datetime.datetime.now()
        datetime_object = datetime.datetime.strptime(meet_time, '%Y-%m-%d %H:%M:%S')
        result = datetime_object - now
        await state.finish()
        await sleep(result.total_seconds() - delay_time * 60 - trip_time * 60)
        await bot.send_message(message.from_user.id, f"‚ùóÔ∏è –í–∞–º –ø–æ—Ä–∞ —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É {group_id}. –ü–æ –∞–¥—Ä–µ—Å—É: {meet_address}.")

        destination_weather = weather.get_weather_by_coordinates(coordinates)
        await bot.send_message(message.from_user.id, f"–ü–æ–≥–æ–¥–∞ –≤ —Ç–æ—á–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        await bot.send_message(message.from_user.id, destination_weather)

        await sleep(result.total_seconds() - trip_time * 60)
        await bot.send_message(message.from_user.id,
                               f"‚ùóÔ∏è‚ùóÔ∏è –í–∞–º –ø–æ—Ä–∞ –≤—ã–µ–∑–∂–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É {group_id}. –ü–æ –∞–¥—Ä–µ—Å—É: {meet_address}.")
        destination_weather = weather.get_weather_by_coordinates(coordinates)
        await bot.send_message(message.from_user.id, f"–ü–æ–≥–æ–¥–∞ –≤ —Ç–æ—á–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        await bot.send_message(message.from_user.id, destination_weather)

    except Exception as ex:
        logger.warning(ex)
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


if __name__ == "__main__":
    executor.start_polling(dp)
